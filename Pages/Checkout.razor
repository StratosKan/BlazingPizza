@page "/checkout"
@using BlazingPizza.Services
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="main">
    <EditForm Model=Order.DeliveryAddress OnValidSubmit=PlaceOrder>
    <div class="checkout-cols">
        <div class="checkout-order-details">
            <h4>Review order</h4>
            <OrderReview Order="Order" />
        </div>

        <div class="checkout-delivery-address">
  <h4>Deliver to...</h4>
  <AddressEditor Address="Order.DeliveryAddress" />
    </div>
    </div>

    <button class="checkout-button btn btn-warning" type="Submit" disabled=@isError>
        Place order
    </button>
    <DataAnnotationsValidator/>
    </EditForm>
</div>

@code {
    Order Order => OrderState.Order;
    bool isError = false;
    private EditContext editContext;
    
    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }
    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        isError = !editContext.Validate();
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
    editContext = new(Order.DeliveryAddress);
    editContext.OnFieldChanged += HandleFieldChanged;
    }    

    protected void ShowError()
    {
        isError = true;
    }
    async Task PlaceOrder()
    {
        isError = false;
        var response = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}orders", OrderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }
}